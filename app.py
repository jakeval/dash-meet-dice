import dash
import dash_bootstrap_components as dbc
from dash import dcc
from dash import html
from dash import dash_table
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import core as core
import numpy as np
from dash.dependencies import Input, Output

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.MINTY])
data = core.get_pca_2d()

displayable_columns = data.columns[~data.columns.isin(['xpca', 'ypca'])]

def get_figure(data, displayable_columns, selected_points=None, newpoints=None, xaxis=None, yaxis=None):
    size = 10
    newdata = data.copy()
    newpoint_idx = None
    if newpoints is not None:
        newpoints = core.pca_process(newpoints)
        newdata = pd.concat([newdata, newpoints])
        newpoint_idx = np.arange(data.shape[0], newdata.shape[0])

    income = newdata['income']

    if xaxis is None:
        xaxis = "xpca"
        yaxis = "ypca"

    small_columns = ['age', 'race', 'gender', 'income']
    hover_text = ""
    for i, column in enumerate(displayable_columns):
        if column in small_columns:
            hover_text += f"{column}: " + "%{customdata[" + str(i) +"]}, "
    trace = go.Scattergl(
            x=newdata[xaxis],
            y=newdata[yaxis],
            mode='markers',
            ids=newdata.index,
            customdata=newdata[displayable_columns],
            hovertemplate=hover_text,
            marker={
                'color': income,
                'cmax': 1,
                'cmin': 0,
                'opacity': 0.8
        })
    layout = go.Layout(
        margin=go.layout.Margin(
            l=0,
            r=0,
            b=0,
            t=0
        )
    )
    fig = go.Figure(data=[trace], layout=layout)
    fig.update_traces(marker_colorscale=[[0, 'rgb(80, 121, 186)'], [1, 'rgb(214, 132, 49)']])
    fig.update_layout(clickmode='event+select')
    if selected_points is not None:
        joined = np.concatenate([np.array(selected_points), newpoint_idx])
        fig.update_traces(
            selectedpoints=joined,
            selected={
                'marker': {
                    'size': size,
                    'color': 'rgb(56, 209, 128)'
                }
            },
            unselected={
                'marker': {
                    'opacity': 0.3,
                }
            })

    return fig

controls = dbc.Col([
    html.H5("Pick the axes:"),
    dbc.Row([
        dbc.Col(dbc.Select(
            id="x-select",
            options=[
                {"label": column, "value": column} for column in data.columns
            ],
            value='xpca'
        )),
        dbc.Col(dbc.Select(
            id="y-select",
            options=[
                {"label": column, "value": column} for column in data.columns
            ],
            value='ypca'
        ))
    ]),
])

title = dbc.Container([
    html.H1('DiCE:'),
    html.H3('Diverse Counterfactual Explanations for Machine Learning Classifiers'),
])

description = dbc.Container([
    html.H5("Algorithmic Recourse"),
    html.Div(
        """When a machine learning algorithm makes an automated decisiona about an individual,
        it is important to inform them how they can change their outcome. This is done by finding
        similar individuals in the dataset that received a different outcome."""),
    html.Br(),
    html.Div(
        """
        The displayed dataset is the often-used Adult Income Dataset. Orange points are predicted to have an income greater than
        50k, whereas blue points are predicted to have lower income.
        """
    ),
    html.Br(),
    html.Div(
        """
        Imagine that a machine learning algorithm uses this dataset to approve or reject loans.
        If you are rejected, what can you change? Try selecting points from the display and seeing
        what the changes suggested by Microsoft's explanations (generated by DiCE) are.
        """
    )
])

display = dbc.Col([dbc.Container([
    html.Label('Adult Income Dataset Visualization'),
    dcc.Graph(
        id='main-display',
        figure=get_figure(data, displayable_columns)
    )
])])

recourse_output = dbc.Col([
    dbc.Row(dbc.Col(html.H4("Printed Recourse"))),
    dbc.Row(dbc.Col([], id='recourse-display'))])

footer = dbc.Container("Built with plotly Dash and Microsoft DiCE")

def transform_df(df, new_columns):
    rows = []
    d = df.T.to_dict(orient='index')
    feature_col = 'Attribute'
    columns = [feature_col] + new_columns
    for feature in d:
        values = d[feature].values()
        m = {}
        m[feature_col] = feature
        for col, val in zip(new_columns, values):
            m[col] = val

        rows.append(m)

    return rows, columns

def make_recourse_display(poi, recourse, columns_to_display=None):
    if columns_to_display is None:
        columns_to_display = displayable_columns
    
    df = pd.concat([poi[columns_to_display], recourse[columns_to_display]])
    new_columns = [f"Recourse Point {i}" for i in range(recourse.shape[0])]

    df_dict, df_columns = transform_df(df, new_columns=['Selected Point'] + new_columns)
    table = dash_table.DataTable(
                id='joint-table',
                columns=[{'name': column, 'id': column} for column in df_columns],
                data=df_dict,
                style_cell={'fontSize':16, 'font-family':'sans-serif' }
            )
    return table


@app.callback(
    Output('recourse-display', 'children'),
    Output('main-display', 'figure'),
    Input('main-display', 'clickData'),
    Input('x-select', 'value'),
    Input('y-select', 'value')
)
def click_on_poi(clickData, xaxis, yaxis):
    if clickData is None:
        return html.Div("Try clicking a point in the display!"), get_figure(data, displayable_columns)
    poi_index = clickData['points'][0]['id']

    poi = data.iloc[data.index == poi_index,:]
    recourse = core.get_explanations(poi[displayable_columns])
    selected_points = np.concatenate([poi.index.to_numpy(), recourse.index.to_numpy()])
    selected_points = [clickData['points'][0]['pointIndex']]
    return make_recourse_display(poi, recourse), get_figure(data, displayable_columns, selected_points, recourse, xaxis, yaxis)


app.layout = dbc.Container([
    title,
    html.Hr(),
    dbc.Row([
        dbc.Col(
            [
                dbc.Row([controls]),
                dbc.Row([display])
            ], 
            md=8),
        dbc.Col([description], md=4)
    ]),
    dbc.Row([recourse_output]),
    dbc.Row([dbc.Col(footer)])
])

if __name__ == '__main__':
    app.run_server(debug=True)
